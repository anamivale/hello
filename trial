package main

import "fmt"

type Stack struct {
	data []int
}

// Push adds an element to the top of the stack
func (s *Stack) Push(value int) {
	s.data = append(s.data, value)
}

// Pop removes the top element from the stack
func (s *Stack) Pop() int {
	if len(s.data) == 0 {
		return 0 // or return an error
	}
	val := s.data[len(s.data)-1]
	s.data = s.data[:len(s.data)-1]
	return val
}

// Peek returns the top element without removing it
func (s *Stack) Peek() int {
	if len(s.data) == 0 {
		return 0 // or return an error
	}
	return s.data[len(s.data)-1]
}

// Len returns the length of the stack
func (s *Stack) Len() int {
	return len(s.data)
}

// IsEmpty checks if the stack is empty
func (s *Stack) IsEmpty() bool {
	return len(s.data) == 0
}

// Swap the first two elements of the stack
func (s *Stack) Swap() {
	if len(s.data) > 1 {
		s.data[0], s.data[1] = s.data[1], s.data[0]
	}
}

// Rotate shifts all elements up by one
func (s *Stack) Rotate() {
	if len(s.data) > 1 {
		first := s.data[0]
		s.data = append(s.data[1:], first)
	}
}

// ReverseRotate shifts all elements down by one
func (s *Stack) ReverseRotate() {
	if len(s.data) > 1 {
		last := s.data[len(s.data)-1]
		s.data = append([]int{last}, s.data[:len(s.data)-1]...)
	}
}
// Swap the first two elements of stack A (sa)
func sa(a *Stack) {
	a.Swap()
}

// Swap the first two elements of stack B (sb)
func sb(b *Stack) {
	b.Swap()
}

// Swap the first two elements of both stacks (ss)
func ss(a, b *Stack) {
	sa(a)
	sb(b)
}

// Push the top element of stack B onto stack A (pa)
func pa(a, b *Stack) {
	if !b.IsEmpty() {
		a.Push(b.Pop())
	}
}

// Push the top element of stack A onto stack B (pb)
func pb(a, b *Stack) {
	if !a.IsEmpty() {
		b.Push(a.Pop())
	}
}

// Rotate stack A (ra)
func ra(a *Stack) {
	a.Rotate()
}

// Rotate stack B (rb)
func rb(b *Stack) {
	b.Rotate()
}

// Rotate both stacks A and B (rr)
func rr(a, b *Stack) {
	ra(a)
	rb(b)
}

// Reverse rotate stack A (rra)
func rra(a *Stack) {
	a.ReverseRotate()
}

// Reverse rotate stack B (rrb)
func rrb(b *Stack) {
	b.ReverseRotate()
}

// Reverse rotate both stacks A and B (rrr)
func rrr(a, b *Stack) {
	rra(a)
	rrb(b)
}
func main() {
	// Initialize stacks A and B
	stackA := &Stack{}
	stackB := &Stack{}

	// Example: Populate stack A with some values
	stackA.Push(3)
	stackA.Push(2)
	stackA.Push(1)

	// Sample operations (in real scenario, read from input)
	operations := []string{"sa", "pb", "ra", "rra", "pa"}

	// Execute operations
	for _, op := range operations {
		switch op {
		case "sa":
			sa(stackA)
		case "sb":
			sb(stackB)
		case "ss":
			ss(stackA, stackB)
		case "pa":
			pa(stackA, stackB)
		case "pb":
			pb(stackA, stackB)
		case "ra":
			ra(stackA)
		case "rb":
			rb(stackB)
		case "rr":
			rr(stackA, stackB)
		case "rra":
			rra(stackA)
		case "rrb":
			rrb(stackB)
		case "rrr":
			rrr(stackA, stackB)
		}
	}

	// Print final state of stacks
	fmt.Println("Stack A:", stackA.data)
	fmt.Println("Stack B:", stackB.data)
}
